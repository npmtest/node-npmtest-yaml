{"/home/travis/build/npmtest/node-npmtest-yaml/test.js":"/* istanbul instrument in package npmtest_yaml */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - init-before\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        switch (local.modeJs) {\n        // re-init local from window.local\n        case 'browser':\n            local = local.global.utility2.objectSetDefault(\n                local.global.utility2_rollup || local.global.local,\n                local.global.utility2\n            );\n            break;\n        // re-init local from example.js\n        case 'node':\n            local = (local.global.utility2_rollup || require('utility2'))\n                .requireReadme();\n            break;\n        }\n        // export local\n        local.global.local = local;\n    }());\n\n\n\n    // run shared js-env code - function\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - function\n    case 'browser':\n        break;\n\n\n\n    // run node js-env code - function\n    case 'node':\n        break;\n    }\n\n\n\n    // run shared js-env code - init-after\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - init-after\n    case 'browser':\n        local.testCase_browser_nullCase = local.testCase_browser_nullCase || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test browsers's null-case handling-behavior-behavior\n         */\n            onError(null, options);\n        };\n\n        // run tests\n        local.nop(local.modeTest &&\n            document.querySelector('#testRunButton1') &&\n            document.querySelector('#testRunButton1').click());\n        break;\n\n\n\n    // run node js-env code - init-after\n    /* istanbul ignore next */\n    case 'node':\n        local.testCase_buildApidoc_default = local.testCase_buildApidoc_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApidoc's default handling-behavior-behavior\n         */\n            options = { modulePathList: module.paths };\n            local.buildApidoc(options, onError);\n        };\n\n        local.testCase_buildApp_default = local.testCase_buildApp_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApp's default handling-behavior-behavior\n         */\n            local.testCase_buildReadme_default(options, local.onErrorThrow);\n            local.testCase_buildLib_default(options, local.onErrorThrow);\n            local.testCase_buildTest_default(options, local.onErrorThrow);\n            local.testCase_buildCustomOrg_default(options, local.onErrorThrow);\n            options = [];\n            local.buildApp(options, onError);\n        };\n\n        local.testCase_buildCustomOrg_default = local.testCase_buildCustomOrg_default ||\n            function (options, onError) {\n            /*\n             * this function will test buildCustomOrg's default handling-behavior\n             */\n                options = {};\n                local.buildCustomOrg(options, onError);\n            };\n\n        local.testCase_buildLib_default = local.testCase_buildLib_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildLib's default handling-behavior\n         */\n            options = {};\n            local.buildLib(options, onError);\n        };\n\n        local.testCase_buildReadme_default = local.testCase_buildReadme_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildReadme's default handling-behavior-behavior\n         */\n            options = {};\n            local.buildReadme(options, onError);\n        };\n\n        local.testCase_buildTest_default = local.testCase_buildTest_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildTest's default handling-behavior\n         */\n            options = {};\n            local.buildTest(options, onError);\n        };\n\n        local.testCase_webpage_default = local.testCase_webpage_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test webpage's default handling-behavior\n         */\n            options = { modeCoverageMerge: true, url: local.serverLocalHost + '?modeTest=1' };\n            local.browserTest(options, onError);\n        };\n\n        // run test-server\n        local.testRunServer(local);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-yaml/lib.npmtest_yaml.js":"/* istanbul instrument in package npmtest_yaml */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - init-before\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || local;\n        // init lib\n        local.local = local.npmtest_yaml = local;\n        // init exports\n        if (local.modeJs === 'browser') {\n            local.global.utility2_npmtest_yaml = local;\n        } else {\n            module.exports = local;\n            module.exports.__dirname = __dirname;\n            module.exports.module = module;\n        }\n    }());\n}());\n","/home/travis/build/npmtest/node-npmtest-yaml/example.js":"/*\nexample.js\n\nquickstart example\n\ninstruction\n    1. save this script as example.js\n    2. run the shell command:\n        $ npm install npmtest-yaml && PORT=8081 node example.js\n    3. play with the browser-demo on http://127.0.0.1:8081\n*/\n\n\n\n/* istanbul instrument in package npmtest_yaml */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - init-before\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || (local.modeJs === 'browser'\n            ? local.global.utility2_npmtest_yaml\n            : global.utility2_moduleExports);\n        // export local\n        local.global.local = local;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // init-after\n    // run browser js-env code - init-after\n    /* istanbul ignore next */\n    case 'browser':\n        local.testRunBrowser = function (event) {\n            if (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('onreset'))) {\n                // reset output\n                Array.from(\n                    document.querySelectorAll('body > .resettable')\n                ).forEach(function (element) {\n                    switch (element.tagName) {\n                    case 'INPUT':\n                    case 'TEXTAREA':\n                        element.value = '';\n                        break;\n                    default:\n                        element.textContent = '';\n                    }\n                });\n            }\n            switch (event && event.currentTarget && event.currentTarget.id) {\n            case 'testRunButton1':\n                // show tests\n                if (document.querySelector('#testReportDiv1').style.display === 'none') {\n                    document.querySelector('#testReportDiv1').style.display = 'block';\n                    document.querySelector('#testRunButton1').textContent =\n                        'hide internal test';\n                    local.modeTest = true;\n                    local.testRunDefault(local);\n                // hide tests\n                } else {\n                    document.querySelector('#testReportDiv1').style.display = 'none';\n                    document.querySelector('#testRunButton1').textContent = 'run internal test';\n                }\n                break;\n            // custom-case\n            default:\n                break;\n            }\n            if (document.querySelector('#inputTextareaEval1') && (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('oneval')))) {\n                // try to eval input-code\n                try {\n                    /*jslint evil: true*/\n                    eval(document.querySelector('#inputTextareaEval1').value);\n                } catch (errorCaught) {\n                    console.error(errorCaught);\n                }\n            }\n        };\n        // log stderr and stdout to #outputTextareaStdout1\n        ['error', 'log'].forEach(function (key) {\n            console[key + '_original'] = console[key];\n            console[key] = function () {\n                var element;\n                console[key + '_original'].apply(console, arguments);\n                element = document.querySelector('#outputTextareaStdout1');\n                if (!element) {\n                    return;\n                }\n                // append text to #outputTextareaStdout1\n                element.value += Array.from(arguments).map(function (arg) {\n                    return typeof arg === 'string'\n                        ? arg\n                        : JSON.stringify(arg, null, 4);\n                }).join(' ') + '\\n';\n                // scroll textarea to bottom\n                element.scrollTop = element.scrollHeight;\n            };\n        });\n        // init event-handling\n        ['change', 'click', 'keyup'].forEach(function (event) {\n            Array.from(document.querySelectorAll('.on' + event)).forEach(function (element) {\n                element.addEventListener(event, local.testRunBrowser);\n            });\n        });\n        // run tests\n        local.testRunBrowser();\n        break;\n\n\n\n    // run node js-env code - init-after\n    /* istanbul ignore next */\n    case 'node':\n        // export local\n        module.exports = local;\n        // require modules\n        local.fs = require('fs');\n        local.http = require('http');\n        local.url = require('url');\n        // init assets\n        local.assetsDict = local.assetsDict || {};\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.index.template.html'] = '\\\n<!doctype html>\\n\\\n<html lang=\"en\">\\n\\\n<head>\\n\\\n<meta charset=\"UTF-8\">\\n\\\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\\n\\\n<title>{{env.npm_package_name}} (v{{env.npm_package_version}})</title>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n    box-sizing: false,\\n\\\n    universal-selector: false\\n\\\n*/\\n\\\n* {\\n\\\n    box-sizing: border-box;\\n\\\n}\\n\\\nbody {\\n\\\n    background: #dde;\\n\\\n    font-family: Arial, Helvetica, sans-serif;\\n\\\n    margin: 2rem;\\n\\\n}\\n\\\nbody > * {\\n\\\n    margin-bottom: 1rem;\\n\\\n}\\n\\\n.utility2FooterDiv {\\n\\\n    margin-top: 20px;\\n\\\n    text-align: center;\\n\\\n}\\n\\\n</style>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n*/\\n\\\ntextarea {\\n\\\n    font-family: monospace;\\n\\\n    height: 10rem;\\n\\\n    width: 100%;\\n\\\n}\\n\\\ntextarea[readonly] {\\n\\\n    background: #ddd;\\n\\\n}\\n\\\n</style>\\n\\\n</head>\\n\\\n<body>\\n\\\n<!-- utility2-comment\\n\\\n<div id=\"ajaxProgressDiv1\" style=\"background: #d00; height: 2px; left: 0; margin: 0; padding: 0; position: fixed; top: 0; transition: background 0.5s, width 1.5s; width: 25%;\"></div>\\n\\\nutility2-comment -->\\n\\\n<h1>\\n\\\n<!-- utility2-comment\\n\\\n    <a\\n\\\n        {{#if env.npm_package_homepage}}\\n\\\n        href=\"{{env.npm_package_homepage}}\"\\n\\\n        {{/if env.npm_package_homepage}}\\n\\\n        target=\"_blank\"\\n\\\n    >\\n\\\nutility2-comment -->\\n\\\n        {{env.npm_package_name}} (v{{env.npm_package_version}})\\n\\\n<!-- utility2-comment\\n\\\n    </a>\\n\\\nutility2-comment -->\\n\\\n</h1>\\n\\\n<h3>{{env.npm_package_description}}</h3>\\n\\\n<!-- utility2-comment\\n\\\n<h4><a download href=\"assets.app.js\">download standalone app</a></h4>\\n\\\n<button class=\"onclick onreset\" id=\"testRunButton1\">run internal test</button><br>\\n\\\n<div id=\"testReportDiv1\" style=\"display: none;\"></div>\\n\\\nutility2-comment -->\\n\\\n\\n\\\n\\n\\\n\\n\\\n<label>stderr and stdout</label>\\n\\\n<textarea class=\"resettable\" id=\"outputTextareaStdout1\" readonly></textarea>\\n\\\n<!-- utility2-comment\\n\\\n{{#if isRollup}}\\n\\\n<script src=\"assets.app.js\"></script>\\n\\\n{{#unless isRollup}}\\n\\\nutility2-comment -->\\n\\\n<script src=\"assets.utility2.rollup.js\"></script>\\n\\\n<script src=\"jsonp.utility2._stateInit?callback=window.utility2._stateInit\"></script>\\n\\\n<script src=\"assets.npmtest_yaml.rollup.js\"></script>\\n\\\n<script src=\"assets.example.js\"></script>\\n\\\n<script src=\"assets.test.js\"></script>\\n\\\n<!-- utility2-comment\\n\\\n{{/if isRollup}}\\n\\\nutility2-comment -->\\n\\\n<div class=\"utility2FooterDiv\">\\n\\\n    [ this app was created with\\n\\\n    <a href=\"https://github.com/kaizhu256/node-utility2\" target=\"_blank\">utility2</a>\\n\\\n    ]\\n\\\n</div>\\n\\\n</body>\\n\\\n</html>\\n\\\n';\n        /* jslint-ignore-end */\n        if (local.templateRender) {\n            local.assetsDict['/'] = local.templateRender(\n                local.assetsDict['/assets.index.template.html'],\n                {\n                    env: local.objectSetDefault(local.env, {\n                        npm_package_description: 'the greatest app in the world!',\n                        npm_package_name: 'my-app',\n                        npm_package_nameAlias: 'my_app',\n                        npm_package_version: '0.0.1'\n                    })\n                }\n            );\n        } else {\n            local.assetsDict['/'] = local.assetsDict['/assets.index.template.html']\n                .replace((/\\{\\{env\\.(\\w+?)\\}\\}/g), function (match0, match1) {\n                    // jslint-hack\n                    String(match0);\n                    switch (match1) {\n                    case 'npm_package_description':\n                        return 'the greatest app in the world!';\n                    case 'npm_package_name':\n                        return 'my-app';\n                    case 'npm_package_nameAlias':\n                        return 'my_app';\n                    case 'npm_package_version':\n                        return '0.0.1';\n                    }\n                });\n        }\n        // run the cli\n        if (local.global.utility2_rollup || module !== require.main) {\n            break;\n        }\n        local.assetsDict['/assets.example.js'] =\n            local.assetsDict['/assets.example.js'] ||\n            local.fs.readFileSync(__filename, 'utf8');\n        // bug-workaround - long $npm_package_buildCustomOrg\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.npmtest_yaml.rollup.js'] =\n            local.assetsDict['/assets.npmtest_yaml.rollup.js'] ||\n            local.fs.readFileSync(\n                local.npmtest_yaml.__dirname + '/lib.npmtest_yaml.js',\n                'utf8'\n            ).replace((/^#!/), '//');\n        /* jslint-ignore-end */\n        local.assetsDict['/favicon.ico'] = local.assetsDict['/favicon.ico'] || '';\n        // if $npm_config_timeout_exit exists,\n        // then exit this process after $npm_config_timeout_exit ms\n        if (Number(process.env.npm_config_timeout_exit)) {\n            setTimeout(process.exit, Number(process.env.npm_config_timeout_exit));\n        }\n        // start server\n        if (local.global.utility2_serverHttp1) {\n            break;\n        }\n        process.env.PORT = process.env.PORT || '8081';\n        console.error('server starting on port ' + process.env.PORT);\n        local.http.createServer(function (request, response) {\n            request.urlParsed = local.url.parse(request.url);\n            if (local.assetsDict[request.urlParsed.pathname] !== undefined) {\n                response.end(local.assetsDict[request.urlParsed.pathname]);\n                return;\n            }\n            response.statusCode = 404;\n            response.end();\n        }).listen(process.env.PORT);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-yaml/node_modules/yaml/lib/yaml.js":"// YAML - Core - Copyright TJ Holowaychuk <tj@vision-media.ca> (MIT Licensed)\n\n/**\n * Version triplet.\n */\n\nexports.version = '0.2.3'\n\n// --- Helpers\n\n/**\n * Return 'near \"context\"' where context\n * is replaced by a chunk of _str_.\n *\n * @param  {string} str\n * @return {string}\n * @api public\n */\n\nfunction context(str) {\n  if (typeof str !== 'string') return ''\n  str = str\n    .slice(0, 25)\n    .replace(/\\n/g, '\\\\n')\n    .replace(/\"/g, '\\\\\\\"')\n  return 'near \"' + str + '\"'\n}\n\n// --- Lexer\n\n/**\n * YAML grammar tokens.\n */\n\nvar tokens = [\n  ['comment', /^#[^\\n]*/],\n  ['indent', /^\\n( *)/],\n  ['space', /^ +/],\n  ['true', /^\\b(enabled|true|yes|on)\\b/],\n  ['false', /^\\b(disabled|false|no|off)\\b/],\n  ['null', /^\\b(null|Null|NULL|~)\\b/],\n  ['string', /^\"(.*?)\"/],\n  ['string', /^'(.*?)'/],\n  ['timestamp', /^((\\d{4})-(\\d\\d?)-(\\d\\d?)(?:(?:[ \\t]+)(\\d\\d?):(\\d\\d)(?::(\\d\\d))?)?)/],\n  ['float', /^(\\d+\\.\\d+)/],\n  ['int', /^(\\d+)/],\n  ['doc', /^---/],\n  [',', /^,/],\n  ['{', /^\\{(?![^\\n\\}]*\\}[^\\n]*[^\\s\\n\\}])/],\n  ['}', /^\\}/],\n  ['[', /^\\[(?![^\\n\\]]*\\][^\\n]*[^\\s\\n\\]])/],\n  [']', /^\\]/],\n  ['-', /^\\-/],\n  [':', /^[:]/],\n  ['string', /^(?![^:\\n\\s]*:[^\\/]{2})(([^:,\\]\\}\\n\\s]|(?!\\n)\\s(?!\\s*?\\n)|:\\/\\/|,(?=[^\\n]*\\s*[^\\]\\}\\s\\n]\\s*\\n)|[\\]\\}](?=[^\\n]*\\s*[^\\]\\}\\s\\n]\\s*\\n))*)(?=[,:\\]\\}\\s\\n]|$)/], \n  ['id', /^([\\w][\\w -]*)/]\n]\n\n/**\n * Tokenize the given _str_.\n *\n * @param  {string} str\n * @return {array}\n * @api private\n */\n\nexports.tokenize = function (str) {\n  var token, captures, ignore, input,\n      indents = 0, lastIndents = 0,\n      stack = [], indentAmount = -1\n\n  // Windows new line support (CR+LF, \\r\\n)\n  str = str.replace(/\\r\\n/g, \"\\n\");\n\n  while (str.length) {\n    for (var i = 0, len = tokens.length; i < len; ++i)\n      if (captures = tokens[i][1].exec(str)) {\n        token = [tokens[i][0], captures],\n        str = str.replace(tokens[i][1], '')\n        switch (token[0]) {\n          case 'comment':\n            ignore = true\n            break\n          case 'indent':\n            lastIndents = indents \n            // determine the indentation amount from the first indent\n            if (indentAmount == -1) {\n              indentAmount = token[1][1].length\n            }\n\n            indents = token[1][1].length / indentAmount\n            if (indents === lastIndents)\n              ignore = true\n            else if (indents > lastIndents + 1)\n              throw new SyntaxError('invalid indentation, got ' + indents + ' instead of ' + (lastIndents + 1))\n            else if (indents < lastIndents) {\n              input = token[1].input\n              token = ['dedent']\n              token.input = input\n              while (--lastIndents > indents)\n                stack.push(token)\n            }\n        }\n        break\n      }\n    if (!ignore)\n      if (token)\n        stack.push(token),\n        token = null\n      else \n        throw new SyntaxError(context(str))\n    ignore = false\n  }\n  return stack\n}\n\n// --- Parser\n\n/**\n * Initialize with _tokens_.\n */\n\nfunction Parser(tokens) {\n  this.tokens = tokens\n}\n\n/**\n * Look-ahead a single token.\n *\n * @return {array}\n * @api public\n */\n\nParser.prototype.peek = function() {\n  return this.tokens[0]\n}\n\n/**\n * Advance by a single token.\n *\n * @return {array}\n * @api public\n */\n\nParser.prototype.advance = function() {\n  return this.tokens.shift()\n}\n\n/**\n * Advance and return the token's value.\n *\n * @return {mixed}\n * @api private\n */\n\nParser.prototype.advanceValue = function() {\n  return this.advance()[1][1]\n}\n\n/**\n * Accept _type_ and advance or do nothing.\n *\n * @param  {string} type\n * @return {bool}\n * @api private\n */\n\nParser.prototype.accept = function(type) {\n  if (this.peekType(type))\n    return this.advance()\n}\n\n/**\n * Expect _type_ or throw an error _msg_.\n *\n * @param  {string} type\n * @param  {string} msg\n * @api private\n */\n\nParser.prototype.expect = function(type, msg) {\n  if (this.accept(type)) return\n  throw new Error(msg + ', ' + context(this.peek()[1].input))\n}\n\n/**\n * Return the next token type.\n *\n * @return {string}\n * @api private\n */\n\nParser.prototype.peekType = function(val) {\n  return this.tokens[0] &&\n         this.tokens[0][0] === val\n}\n\n/**\n * space*\n */\n\nParser.prototype.ignoreSpace = function() {\n  while (this.peekType('space'))\n    this.advance()\n}\n\n/**\n * (space | indent | dedent)*\n */\n\nParser.prototype.ignoreWhitespace = function() {\n  while (this.peekType('space') ||\n         this.peekType('indent') ||\n         this.peekType('dedent'))\n    this.advance()\n}\n\n/**\n *   block\n * | doc\n * | list\n * | inlineList\n * | hash\n * | inlineHash\n * | string\n * | float\n * | int\n * | true\n * | false\n * | null\n */\n\nParser.prototype.parse = function() {\n  switch (this.peek()[0]) {\n    case 'doc':\n      return this.parseDoc()\n    case '-':\n      return this.parseList()\n    case '{':\n      return this.parseInlineHash()\n    case '[':\n      return this.parseInlineList()\n    case 'id':\n      return this.parseHash()\n    case 'string':\n      return this.advanceValue()\n    case 'timestamp':\n      return this.parseTimestamp()\n    case 'float':\n      return parseFloat(this.advanceValue())\n    case 'int':\n      return parseInt(this.advanceValue())\n    case 'true':\n      this.advanceValue(); return true\n    case 'false':\n      this.advanceValue(); return false\n    case 'null':\n      this.advanceValue(); return null\n  }\n}\n\n/**\n * '---'? indent expr dedent\n */\n\nParser.prototype.parseDoc = function() {\n  this.accept('doc')\n  this.expect('indent', 'expected indent after document')\n  var val = this.parse()\n  this.expect('dedent', 'document not properly dedented')\n  return val\n}\n\n/**\n *  ( id ':' - expr -\n *  | id ':' - indent expr dedent\n *  )+\n */\n\nParser.prototype.parseHash = function() {\n  var id, hash = {}\n  while (this.peekType('id') && (id = this.advanceValue())) {\n    this.expect(':', 'expected semi-colon after id')\n    this.ignoreSpace()\n    if (this.accept('indent'))\n      hash[id] = this.parse(),\n      this.expect('dedent', 'hash not properly dedented')\n    else\n      hash[id] = this.parse()\n    this.ignoreSpace()\n  }\n  return hash\n}\n\n/**\n * '{' (- ','? ws id ':' - expr ws)* '}'\n */\n\nParser.prototype.parseInlineHash = function() {\n  var hash = {}, id, i = 0\n  this.accept('{')\n  while (!this.accept('}')) {\n    this.ignoreSpace()\n    if (i) this.expect(',', 'expected comma')\n    this.ignoreWhitespace()\n    if (this.peekType('id') && (id = this.advanceValue())) {\n      this.expect(':', 'expected semi-colon after id')\n      this.ignoreSpace()\n      hash[id] = this.parse()\n      this.ignoreWhitespace()\n    }\n    ++i\n  }\n  return hash\n}\n\n/**\n *  ( '-' - expr -\n *  | '-' - indent expr dedent\n *  )+\n */\n\nParser.prototype.parseList = function() {\n  var list = []\n  while (this.accept('-')) {\n    this.ignoreSpace()\n    if (this.accept('indent'))\n      list.push(this.parse()),\n      this.expect('dedent', 'list item not properly dedented')\n    else\n      list.push(this.parse())\n    this.ignoreSpace()\n  }\n  return list\n}\n\n/**\n * '[' (- ','? - expr -)* ']'\n */\n\nParser.prototype.parseInlineList = function() {\n  var list = [], i = 0\n  this.accept('[')\n  while (!this.accept(']')) {\n    this.ignoreSpace()\n    if (i) this.expect(',', 'expected comma')\n    this.ignoreSpace()\n    list.push(this.parse())\n    this.ignoreSpace()\n    ++i\n  }\n  return list\n}\n\n/**\n * yyyy-mm-dd hh:mm:ss\n *\n * For full format: http://yaml.org/type/timestamp.html\n */\n\nParser.prototype.parseTimestamp = function() {\n  var token = this.advance()[1]\n  var date = new Date\n  var year = token[2]\n    , month = token[3]\n    , day = token[4]\n    , hour = token[5] || 0 \n    , min = token[6] || 0\n    , sec = token[7] || 0\n\n  date.setUTCFullYear(year, month-1, day)\n  date.setUTCHours(hour)\n  date.setUTCMinutes(min)\n  date.setUTCSeconds(sec)\n  date.setUTCMilliseconds(0)\n  return date\n}\n\n/**\n * Evaluate a _str_ of yaml.\n *\n * @param  {string} str\n * @return {mixed}\n * @api public\n */\n\nexports.eval = function(str) {\n  return (new Parser(exports.tokenize(str))).parse()\n}\n"}